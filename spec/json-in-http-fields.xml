<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='rfcxml.xslt' ?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<?rfc-ext allow-markup-in-artwork="yes" ?>
<?rfc-ext html-pretty-print="prettyprint https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js"?>
<?rfc private="A JSON Encoding for HTTP Field Values"?>

<!DOCTYPE rfc [
  <!ENTITY mdash "&#8212;">
  <!ENTITY Note "<x:h xmlns:x='http://purl.org/net/xml2rfc/ext'>Note:</x:h>">
]>
<!--
  <!ENTITY MAY "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>MAY</bcp14>">
  <!ENTITY MUST "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>MUST</bcp14>">
  <!ENTITY MUST-NOT "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>MUST NOT</bcp14>">
  <!ENTITY OPTIONAL "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>OPTIONAL</bcp14>">
  <!ENTITY RECOMMENDED "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>RECOMMENDED</bcp14>">
  <!ENTITY REQUIRED "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>REQUIRED</bcp14>">
  <!ENTITY SHALL "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>SHALL</bcp14>">
  <!ENTITY SHALL-NOT "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>SHALL NOT</bcp14>">
  <!ENTITY SHOULD "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>SHOULD</bcp14>">
  <!ENTITY SHOULD-NOT "<bcp14 xmlns='http://purl.org/net/xml2rfc/ext'>SHOULD NOT</bcp14>">
-->

<rfc xmlns:x="http://purl.org/net/xml2rfc/ext"
     xmlns:xi="http://www.w3.org/2001/XInclude"
     version="3">

	<front>
  <title>A JSON Encoding for HTTP Field Values</title>
  <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke">
    <organization abbrev="greenbytes">greenbytes GmbH</organization>
    <address>
      <postal>
        <street>Hafenweg 16</street>
        <city x:optional-ascii="Muenster">M&#xfc;nster</city><code>48155</code>
        <country>Germany</country>
      </postal>
      <email>julian.reschke@greenbytes.de</email>
      <uri>http://greenbytes.de/tech/webdav/</uri>
    </address>
  </author>

  <date year="2025" month="April" day="18"/>

  <keyword>HTTP</keyword>
  <keyword>JSON</keyword>
  <keyword>Field Value</keyword>

  <abstract>
    <t>
      This document establishes a convention for use of JSON-encoded field
      values in new HTTP fields.
    </t>
  </abstract>


  <note title="Editorial Note">
    <t>
      This document is <em>not</em> an IETF specification, but it
      indeed started as one. See <eref target="https://datatracker.ietf.org/doc/draft-ietf-httpbis-jfv/"/>
      for details.
    </t>
  </note>

  </front>

  <middle>

<section title="Introduction" anchor="introduction">
<t>
  Defining syntax for new HTTP fields (<xref target="HTTP" x:fmt=","
  x:rel="#fields"/>) is non-trivial. Among the commonly encountered
  problems are:
</t>
<ul>
  <li>There is no common syntax for complex field values. Several well-known
    fields do use a similarly looking syntax, but it is hard to write
    generic parsing code that will both correctly handle valid field values
    but also reject invalid ones.</li>
  <li>The HTTP message format allows field lines to repeat, so field syntax
    needs to be designed in a way that these cases are either meaningful,
    or can be unambiguously detected and rejected.</li>
  <li>HTTP does not define a character encoding scheme (<xref target="RFC6365"
    x:fmt="," x:sec="2"/>), so fields are either stuck with US-ASCII
    (<xref target="RFC0020"/>), or need out-of-band information
    to decide what encoding scheme is used. Furthermore, APIs
    usually assume a default encoding scheme in order to map from
    octet sequences to strings (for instance, <xref target="XMLHttpRequest"/>
    uses the IDL type "ByteString", effectively resulting in the
    ISO-8859-1 character encoding scheme <xref target="ISO-8859-1"/> being used).</li>
</ul>
<t>
  (See <xref target="HTTP" x:fmt="of" x:rel="#fields.extensibility"/>
  for a summary of considerations for new fields.)
</t>
<t>
  This specification addresses the issues listed above by defining both a generic
  JSON-based (<xref target="RFC8259"/>) data model and a concrete
  wire format that can be used in definitions of new fields, where the
  goals were:
</t>
<ul>
  <li>to be compatible with field recombination when field lines occur multiple
  times in a single message (<xref target="HTTP" x:fmt="of" x:rel="#fields.order"/>), and</li>
  <li>not to use any problematic characters in the field value (non-ASCII characters and certain whitespace characters).</li>
</ul>

<section>
  <name>Relation to "Structured Field Values for HTTP" (<xref target="STRUCTURED-FIELDS"/>)</name>
<t>
  "Structured Field Values for HTTP", an IETF RFC on the Standards Track, is a
  different approach to this set of problems. It uses a more compact
  notation, similar to what is used in existing header fields, and avoids
  several potential interoperability problems inherent to the use of JSON.
</t>
<t>
  In general, that format is preferred for newly defined fields. The
  JSON-based format defined by this document might however be useful
  in case the data that needs to be transferred is already in JSON format,
  or features not covered by "Structured Field Values" are needed.
</t>
<t>
  See <xref target="comparison"/> for more details.
</t>
</section>
</section>

<section title="Data Model and Format" anchor="data-model-and-format">
<t>
  In HTTP, field lines with the same field name can occur multiple times
  within a single message (<xref target="HTTP" x:fmt="of" x:rel="#fields.order"/>).
  When this happens, recipients are allowed to combine the field line values
  using  commas as delimiter, forming a combined "field value". This rule
  matches nicely JSON's array format
  (<xref target="RFC8259" x:fmt="of" x:rel="#arrays"/>). Thus, the basic data model
  used here is the JSON array.
</t>
<t>
  Field definitions that need only a single value can restrict
  themselves to arrays of length 1, and are encouraged to define error
  handling in case more values are received (such as "first wins", "last wins",
  or "abort with fatal error message").
</t>
<t>
  JSON arrays are mapped to field values by creating a sequence of
  serialized member elements, separated by commas and optionally whitespace. This
  is equivalent to using the full JSON array format, while leaving out
  the "begin-array" ('[') and "end-array" (']') delimiters.
</t>
<t>
  The ABNF character names and classes below are used (copied
  from <xref target="RFC5234" x:fmt="," x:sec="B.1"/>):
</t>
<sourcecode type="abnf9110">
  CR               = %x0D    ; carriage return
  HTAB             = %x09    ; horizontal tab
  LF               = %x0A    ; line feed
  SP               = %x20    ; space
  VCHAR            = %x21-7E ; visible (printing) characters
</sourcecode>
<t>
  Characters in JSON strings that are not allowed or discouraged in HTTP
  field values &mdash; that is, not in the "VCHAR" definition &mdash;
  need to be represented using JSON's "backslash" escaping mechanism
  (<xref target="RFC8259" x:fmt="," x:rel="#strings"/>).
</t>
<t>
  The control characters CR, LF, and HTAB do not appear inside JSON
  strings, but can be used outside (line breaks, indentation etc.). These characters
  need to be either stripped or replaced by space characters (ABNF "SP").
</t>
<t>
  Formally, using the HTTP specification's ABNF extensions defined in
  <xref target="HTTP" x:fmt="of" x:rel="#abnf.extension"/>:
</t>
<sourcecode type="abnf9110">
  json-field-value = #json-field-item
  json-field-item  = JSON-Text
                   ; see <xref target="RFC8259" x:fmt="," x:rel="#grammar"/>,
                   ; post-processed so that only VCHAR characters
                   ; are used
</sourcecode>
</section>

<section title="Sender Requirements">
<t>
  To map a JSON array to an HTTP field value, process each array
  element separately by:
</t>
<ol>
  <li>generating the JSON representation,</li>
  <li>stripping all JSON control characters (CR, HTAB, LF), or replacing
      them by space ("SP") characters,</li>
  <li>replacing all remaining non-VSPACE characters by the equivalent
      backslash-escape sequence (<xref target="RFC8259" x:fmt="," x:rel="#strings"/>).</li>
</ol>
<t>
  The resulting list of strings is transformed into an HTTP field value
  by combining them using comma (%x2C) plus optional SP as delimiter,
  and encoding the resulting string into an octet sequence using the
  US-ASCII character encoding scheme (<xref target="RFC0020"/>).
</t>

<section title="Example">
<t>
  With the JSON data below, containing  the non-ASCII characters <u>&#xfc;</u>
  and <u>&#x20ac;</u>:
</t>
<sourcecode type="json">
[
  {
    "destination": "M&#xfc;nster",
    "price": 123,
    "currency": "&#x20ac;"
  }
]
</sourcecode>
<t>
  The generated field value would be:
</t>
<sourcecode type="json">
{ "destination": "M\u00FCnster", "price": 123, "currency": "\u20AC" }
</sourcecode>
</section>

</section>

<section title="Recipient Requirements">
<t>
  To map a set of HTTP field line values to a JSON array:
</t>
<ol>
  <li>combine all field line values into a single field value as per
    <xref target="HTTP" x:fmt="of" x:rel="#fields.order"/>,</li>
  <li>add a leading begin-array ("[") octet and a trailing end-array ("]") octet, then</li>
  <li>run the resulting octet sequence through a JSON parser.</li>
</ol>
<t>
  The result of the parsing operation is either an error (in which case
  the field values needs to be considered invalid), or a JSON array.
</t>
<section title="Example">
<t>
  An HTTP message containing the field lines:
</t>
<artwork type="http-message">
Example: "\u221E"
Example: {"date":"2012-08-25"}
Example: [17,42]
</artwork>
<t>
  would be parsed into the JSON array below:
</t>
<sourcecode type="json">
[
  "&#x221e;",
  {
    "date": "2012-08-25"
  },
  [
    17,
    42
  ]
]
</sourcecode>
</section>
</section>

<section title="Using this Format in Field Definitions" anchor="using-this-format-in-header-field-definitions">
<t>
  Specifications defining new HTTP fields need to take the
  considerations listed in <xref target="HTTP" x:rel="#fields.extensibility"/>
  into account. Many of these will already be accounted for by using the
  format defined in this specification.
</t>
<t>
  Readers of HTTP-related specifications frequently expect an ABNF definition
  of the field value syntax. This is not really needed here, as the actual
  syntax is JSON text, as defined in <xref target="RFC8259" x:fmt="of" x:rel="#grammar"/>.
</t>
<t>
  A very simple way to use this JSON encoding thus is just to
  cite this specification &mdash; specifically the "json-field-value" ABNF production
  defined in <xref target="data-model-and-format"/> &mdash; and otherwise not to talk about the details of the field
  syntax at all.
</t>
<t>
  An alternative approach is just to repeat the ABNF-related parts from <xref target="data-model-and-format"/>.
</t>
<t>
  This frees the specification from defining the concrete on-the-wire syntax.
  What's left is defining the field value in terms of a JSON array. An
  important aspect is the question of extensibility, e.g. how recipients
  ought to treat unknown field names. In general, a "must ignore" approach
  will allow protocols to evolve without versioning or even using entire new
  field names.
</t>
</section>


<section title="Deployment Considerations">
<t>
  This JSON-based syntax will only apply to newly introduced
  fields, thus backwards compatibility is not a problem. That being
  said, it is conceivable that there is existing code that might trip over
  double quotes not being used for HTTP's quoted-string syntax
  (<xref target="HTTP" x:rel="#quoted.strings"/>).
</t>
</section>

<section title="Interoperability Considerations" anchor="interop">
<t>
  The "I-JSON Message Format" specification (<xref target="RFC7493"/>) addresses
  known JSON interoperability pain points. This specification borrows from
  the requirements made over there:
</t>
<section title="Encoding and Characters">
<t>
  This specification requires that field values use only US-ASCII characters,
  and thus by definition uses a subset of UTF-8 (<xref target="RFC7493" x:fmt="of" x:sec="2.1"/>).
</t>
<t>
  Furthermore, escape sequences in JSON strings (<xref target="RFC8259" x:fmt="of" x:sec="7"/>)
  &mdash; both in object member names and string values &mdash;
  are not allowed to represent non-Unicode code points such as unpaired surrogates or
  Noncharacters (see "General Structure" in <xref target="UNICODE"/>).
</t>
</section>
<section title="Numbers" anchor="interop.numbers">
<t>
  Be aware of the issues around number precision, as discussed in <xref target="RFC7493" x:fmt="of" x:sec="2.2"/>.
</t>
</section>
<section title="Object Constraints">
<t>
  As described in <xref target="RFC8259" x:fmt="of" x:sec="4"/>, JSON parser implementations
  differ in the handling of duplicate object names. Therefore, senders are not allowed to
  use duplicate object names, and recipients are advised to either treat
  field values with duplicate names as invalid (consistent with <xref target="RFC7493" x:fmt="," x:sec="2.3"/>)
  or use the lexically last value (consistent with <xref target="ECMA-262" x:fmt="," x:sec="24.3.1.1" x:rel="#sec-internalizejsonproperty"/>).
</t>
<t>
  Furthermore, ordering of object members is not significant and can not be relied upon.
</t>
</section>
</section>

<section title="Internationalization Considerations">
<t>
  In current versions of HTTP, field values are represented by octet sequences, usually used to
  transmit ASCII characters, with restrictions on the use of certain
  control characters, and no associated default character encoding, nor
  a way to describe it (<xref target="HTTP" x:fmt="," x:rel="#fields"/>).
</t>
<t>
  This specification maps all characters which can cause problems to JSON
  escape sequences, thereby solving the HTTP field
  internationalization problem.
</t>
<t>
  Future specifications of HTTP might change to allow non-ASCII characters
  natively. In that case, fields using the syntax defined by this
  specification would have a simple migration path (by just stopping
  to require escaping of non-ASCII characters).
</t>
</section>

<section title="Security Considerations">
<t>
  Using JSON-shaped field values is believed to not introduce any new threads
  beyond those described in <xref target="RFC8259" x:sec="12"/>, namely
  the risk of recipients using the wrong tools to parse them.
</t>
<t>
  Other than that, any syntax that makes extensions easy can be used to
  smuggle information through field values; however, this concern is shared
  with other widely used formats, such as those using parameters in the
  form of name/value pairs.
</t>
</section>

  </middle>
  <back>

<references title="Normative References">

  <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.0020.xml"/>
  <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml"/>
  <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7493.xml"/>

  <reference anchor='RFC8259'>
    <x:source href="rfc8259.xml" basename="rfc8259"/>
  </reference>

  <reference anchor="HTTP">
    <x:source href="rfc9110.xml" basename="rfc9110"/>
  </reference>

  <reference anchor='STRUCTURED-FIELDS'>
    <x:source href="rfc9651.xml" basename="rfc9651"/>
  </reference>

  <reference anchor="UNICODE" target="http://www.unicode.org/versions/latest/">
    <front>
      <title>The Unicode Standard</title>
      <author>
        <organization>The Unicode Consortium</organization>
      </author>
    </front>
  </reference>

</references>

<references title="Informative References">
  <reference anchor="ISO-8859-1">
    <front>
      <title>Information technology -- 8-bit single-byte coded graphic character sets -- Part 1: Latin alphabet No. 1</title>
      <author>
        <organization>International Organization for Standardization</organization>
      </author>
      <date year="1998"/>
    </front>
    <seriesInfo name="ISO/IEC" value="8859-1:1998"/>
  </reference>

  <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6365.xml"/>

  <reference anchor='ECMA-262'
             target='http://www.ecma-international.org/ecma-262/6.0/'>
    <front>
      <title>ECMA-262 6th Edition, The ECMAScript 2015 Language Specification</title>
      <author><organization>Ecma International</organization></author>
      <date year='2015' month='June'/>
    </front>
    <seriesInfo name='Standard' value='ECMA-262'/>
  </reference>

  <reference anchor="UNICHARS">
    <front>
      <title>Unicode Character Repertoire Subsets</title>
      <author fullname="Tim Bray" initials="T." surname="Bray"/>
      <author fullname="Paul E. Hoffman" initials="P. E." surname="Hoffman"/>
      <date day="3" month="March" year="2025"/>
    </front>
    <seriesInfo name="Internet-Draft" value="draft-bray-unichars-11"/>
  </reference>

  <reference anchor="UTF-8">
    <front>
      <title>UTF-8, a transformation format of ISO 10646</title>
      <author fullname="F. Yergeau" initials="F." surname="Yergeau"/>
      <date month="November" year="2003"/>
    </front>
    <seriesInfo name="STD" value="63"/>
    <seriesInfo name="RFC" value="3629"/>
  </reference>

  <reference anchor='XMLHttpRequest'
             target='https://xhr.spec.whatwg.org/'>
    <front>
      <title>XMLHttpRequest</title>
      <author><organization>WhatWG</organization></author>
      <date/>
    </front>
  </reference>
</references>

<section title="Comparison with Structured Fields" anchor="comparison">

<section title="Base Types">
<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>in Structured Fields</th>
      <th>in JSON-based Fields</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="2">Integer</th>
      <td><xref target="STRUCTURED-FIELDS" x:fmt="," x:rel="#integer"/></td>
      <td><xref target="RFC8259" x:fmt="," x:sec="6"/></td>
    </tr>
    <tr>
      <td>(restricted to 15 digits)</td>
      <td></td>
    </tr>
    <tr>
      <th rowspan="2">Decimal</th>
      <td><xref target="STRUCTURED-FIELDS" x:fmt="," x:rel="#decimal"/></td>
      <td><xref target="RFC8259" x:fmt="," x:sec="6"/></td>
    </tr>
    <tr>
      <td>(a fixed point decimal restricted to 12 + 3 digits)</td>
      <td></td>
    </tr>
    <tr>
      <th rowspan="2">String</th>
      <td><xref target="STRUCTURED-FIELDS" x:fmt="," x:rel="#string"/> and <xref target="STRUCTURED-FIELDS" x:fmt="," x:rel="#displaystring"/></td>
      <td><xref target="RFC8259" x:fmt="," x:sec="7"/></td>
    </tr>
    <tr>
      <td>Strings only support ASCII (<xref target="RFC0020"/>), but "Display Strings" cover anything encodable as <xref target="UTF-8"/>
      (that excludes surrogates (<xref target="UNICHARS" x:sec="2.2.1"/>)).</td>
      <td>JSON strings can transport any Unicode code point, due to the "\uxxxx" escape notation.</td>
    </tr>
    <tr>
      <th>Token</th>
      <td><xref target="STRUCTURED-FIELDS" x:fmt="," x:rel="#token"/></td>
      <td>not available, but can be mapped to strings</td>
    </tr>
    <tr>
      <th>Byte Sequence</th>
      <td><xref target="STRUCTURED-FIELDS" x:fmt="," x:rel="#binary"/></td>
      <td>not available, usually mapped to strings using base64 encoding</td>
    </tr>
    <tr>
      <th>Boolean</th>
      <td><xref target="STRUCTURED-FIELDS" x:fmt="," x:rel="#boolean"/></td>
      <td><xref target="RFC8259" x:fmt="," x:sec="3"/></td>
    </tr>
    <tr>
      <th>Date</th>
      <td><xref target="STRUCTURED-FIELDS" x:fmt="," x:rel="#date"/></td>
      <td>not available, usually mapped to Strings or Numbers</td>
    </tr>
  </tbody>
</table>
<t>
  Structured Fields provide more data types (such as "token" or "byte sequence").
  Numbers are restricted, avoiding the JSON interop problems described
  in <xref target="interop.numbers"/>. 
</t>
</section>

<section title="Structures">
<t>
  Structured Fields define Lists (<xref target="STRUCTURED-FIELDS" x:fmt="," x:rel="#list"/>),
  similar to JSON arrays (<xref target="RFC8259" x:fmt="," x:sec="5"/>), and
  Dictionaries (<xref target="STRUCTURED-FIELDS" x:fmt="," x:rel="#dictionary"/>), similar to
  JSON objects (<xref target="RFC8259" x:fmt="," x:sec="4"/>).
</t>
<t>
  In addition, most items in Structured Fields can be parametrized (<xref target="STRUCTURED-FIELDS" x:fmt="," x:rel="#param"/>),
  attaching a dictionary-like structure to the value. To emulate this in JSON based field,
  an additional nesting of objects would be needed.
</t>
<t>
  Finally, nesting of data structures is intentionally limited to two levels
  (see <xref target="STRUCTURED-FIELDS" x:fmt="of" x:rel="#why-not-json"/> for the motivation).
</t>
</section>
</section>

<section title="Implementations" anchor="implementations">
<t>
  See <eref target="https://github.com/reschke/json-fields"/> for a proof-of-concept (in development).
</t>
</section>

<section title="Acknowledgements" anchor="acks" numbered="false">
<t>
  Thanks go to the Hypertext Transfer Protocol Working Group participants.
</t>
</section>

  </back>

</rfc>
